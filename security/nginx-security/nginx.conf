# Production Nginx Configuration for Shell Platform
# Optimized for security, performance, and reliability

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Load dynamic modules
include /usr/share/nginx/modules/*.conf;
load_module modules/ngx_http_geoip_module.so;
load_module modules/ngx_http_realip_module.so;

# Worker configuration
events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
    worker_rlimit_nofile 8192;
}

http {
    # Basic configuration
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Charset
    charset utf-8;
    
    # Server tokens (security)
    server_tokens off;
    
    # File I/O optimization
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    
    # Timeouts
    keepalive_timeout 65;
    keepalive_requests 1000;
    client_header_timeout 60;
    client_body_timeout 60;
    send_timeout 60;
    
    # Buffer sizes
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 16k;
    client_max_body_size 100m;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;
    
    # Brotli compression (if available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time ut="$upstream_response_time"';
    
    # Security logging format
    log_format security '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        '"$http_x_real_ip" "$http_cf_connecting_ip"';
    
    access_log /var/log/nginx/access.log main buffer=64k flush=5s;
    error_log /var/log/nginx/error.log error;
    
    # Security headers (applied to all locations)
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=()" always;
    
    # Content Security Policy (CSP)
    include /etc/nginx/security/csp.conf;
    
    # Real IP configuration (for Cloudflare)
    include /etc/nginx/security/real-ip.conf;
    
    # Rate limiting zones
    include /etc/nginx/security/rate-limiting.conf;
    
    # GeoIP blocking
    include /etc/nginx/security/geoip.conf;
    
    # SSL configuration
    include /etc/nginx/security/ssl.conf;
    
    # Hide nginx version
    more_clear_headers Server;
    more_set_headers "Server: Shell-Platform";
    
    # Map for maintenance mode
    map $uri $maintenance {
        default 0;
        ~^/maintenance 1;
        ~^/health 0;
        ~^/status 0;
    }
    
    # Map for API versioning
    map $http_accept $api_version {
        default v1;
        ~application/vnd\.shell-platform\.v1 v1;
        ~application/vnd\.shell-platform\.v2 v2;
    }
    
    # Upstream configurations
    upstream api_backend {
        least_conn;
        keepalive 32;
        keepalive_timeout 60s;
        keepalive_requests 100;
        
        server api-gateway-1:3001 max_fails=3 fail_timeout=30s weight=10;
        server api-gateway-2:3001 max_fails=3 fail_timeout=30s weight=10;
        server api-gateway-3:3001 max_fails=3 fail_timeout=30s weight=10 backup;
        
        # Health check (requires nginx-plus or custom module)
        # health_check interval=10s fails=3 passes=2 uri=/health;
    }
    
    upstream file_service_backend {
        least_conn;
        keepalive 16;
        
        server file-service-1:3002 max_fails=2 fail_timeout=20s;
        server file-service-2:3002 max_fails=2 fail_timeout=20s;
    }
    
    upstream external_api_backend {
        least_conn;
        keepalive 8;
        
        server external-api-1:3003 max_fails=2 fail_timeout=20s;
        server external-api-2:3003 max_fails=2 fail_timeout=20s;
    }
    
    # Default server (catch-all for unknown hosts)
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;
        
        ssl_certificate /etc/ssl/certs/default.pem;
        ssl_certificate_key /etc/ssl/private/default.key;
        
        server_name _;
        
        # Log suspicious requests
        access_log /var/log/nginx/suspicious.log security;
        
        # Deny all requests to unknown hosts
        location / {
            return 444;
        }
        
        # Health check endpoint
        location = /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
    }
    
    # Main application server
    server {
        listen 80;
        listen [::]:80;
        server_name shell-platform.com www.shell-platform.com;
        
        # Security headers specific to HTTP
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        
        # Redirect HTTP to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
        
        # Let's Encrypt challenge
        location /.well-known/acme-challenge/ {
            root /var/www/letsencrypt;
        }
    }
    
    # HTTPS server
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name shell-platform.com www.shell-platform.com;
        
        # SSL configuration
        ssl_certificate /etc/letsencrypt/live/shell-platform.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/shell-platform.com/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/shell-platform.com/chain.pem;
        
        # Security headers for HTTPS
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        
        # Enable OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;
        
        # Root directory
        root /var/www/html;
        index index.html index.htm;
        
        # Custom error pages
        error_page 404 /error/404.html;
        error_page 500 502 503 504 /error/50x.html;
        
        # Maintenance mode
        if ($maintenance = 1) {
            return 503;
        }
        error_page 503 /maintenance.html;
        location = /maintenance.html {
            root /var/www/html;
            internal;
        }
        
        # Security locations
        include /etc/nginx/security/locations.conf;
        
        # API routes
        location /api/ {
            # Rate limiting
            limit_req zone=api burst=20 nodelay;
            limit_req_status 429;
            
            # CORS headers (if needed)
            include /etc/nginx/security/cors.conf;
            
            # Proxy to API backend
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Caching for certain API endpoints
            location ~* ^/api/v1/(config|public) {
                proxy_pass http://api_backend;
                proxy_cache api_cache;
                proxy_cache_valid 200 5m;
                proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
                add_header X-Cache-Status $upstream_cache_status;
            }
        }
        
        # File service routes
        location /files/ {
            # Rate limiting for file uploads
            limit_req zone=files burst=10 nodelay;
            
            # Increase client body size for file uploads
            client_max_body_size 500m;
            client_body_timeout 300s;
            
            proxy_pass http://file_service_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Long timeout for file operations
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
        }
        
        # External API routes
        location /external/ {
            # Strict rate limiting
            limit_req zone=external burst=5 nodelay;
            
            proxy_pass http://external_api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Static file serving with caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
            
            # Compress static files
            gzip_static on;
            
            # Security for font files
            location ~* \.(woff|woff2|ttf|eot)$ {
                add_header Access-Control-Allow-Origin "*";
            }
        }
        
        # Frontend application
        location / {
            # Rate limiting
            limit_req zone=general burst=50 nodelay;
            
            try_files $uri $uri/ @frontend;
        }
        
        # Frontend fallback for SPA
        location @frontend {
            proxy_pass http://frontend_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # WebSocket support
        location /ws {
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket timeouts
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
        }
        
        # Monitoring endpoints (restricted access)
        location /metrics {
            allow 127.0.0.1;
            allow 172.16.0.0/12;  # Private network
            allow 10.0.0.0/8;     # Private network
            deny all;
            
            proxy_pass http://api_backend;
        }
        
        location /health {
            access_log off;
            proxy_pass http://api_backend;
            proxy_connect_timeout 1s;
            proxy_timeout 1s;
        }
    }
    
    # Monitoring subdomain
    server {
        listen 443 ssl http2;
        server_name monitoring.shell-platform.com;
        
        ssl_certificate /etc/letsencrypt/live/shell-platform.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/shell-platform.com/privkey.pem;
        
        # Restrict access to monitoring
        satisfy any;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        # Basic auth for additional security
        auth_basic "Monitoring Access";
        auth_basic_user_file /etc/nginx/.htpasswd;
        
        location / {
            proxy_pass http://grafana:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    
    # Cache configuration
    proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:10m max_size=1g inactive=60m use_temp_path=off;
    proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:10m max_size=2g inactive=1d use_temp_path=off;
    
    # Include additional configurations
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}