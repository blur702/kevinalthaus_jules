---
title: Claude Code Model Selection Decision Tree
---
graph TD
    Start["ü§î Task Request"] --> Complexity{"What's the task<br/>complexity?"}
    
    %% Simple Tasks Branch
    Complexity -->|Simple| Simple["üü¢ Simple Task<br/>‚Ä¢ Data queries<br/>‚Ä¢ Documentation<br/>‚Ä¢ Basic analysis<br/>‚Ä¢ Content creation<br/>‚Ä¢ Standard operations"]
    
    Simple --> HaikuCriteria{"Does it require<br/>specialized knowledge<br/>or complex reasoning?"}
    HaikuCriteria -->|No| HaikuModel["‚ö° HAIKU<br/>Fast & Cost-Effective<br/>15 Agents"]
    HaikuCriteria -->|Yes| SonnetModel["‚öñÔ∏è SONNET<br/>Balanced Performance<br/>44 Agents"]
    
    %% Moderate Tasks Branch
    Complexity -->|Moderate| Moderate["üü° Moderate Task<br/>‚Ä¢ Code development<br/>‚Ä¢ System design<br/>‚Ä¢ Infrastructure setup<br/>‚Ä¢ Testing & debugging<br/>‚Ä¢ Integration work"]
    
    Moderate --> ModerateCheck{"Is this mission-critical<br/>or requires deep<br/>architectural insight?"}
    ModerateCheck -->|No| SonnetModel
    ModerateCheck -->|Yes| OpusModel["üß† OPUS<br/>Maximum Capability<br/>15 Agents"]
    
    %% Complex Tasks Branch
    Complexity -->|Complex| Complex["üî¥ Complex Task<br/>‚Ä¢ AI/ML systems<br/>‚Ä¢ Security auditing<br/>‚Ä¢ Performance optimization<br/>‚Ä¢ Incident response<br/>‚Ä¢ Financial modeling<br/>‚Ä¢ Architectural review"]
    
    Complex --> OpusModel
    
    %% Model Details
    HaikuModel --> HaikuAgents["Haiku Agents:<br/>‚Ä¢ data-scientist<br/>‚Ä¢ api-documenter<br/>‚Ä¢ reference-builder<br/>‚Ä¢ business-analyst<br/>‚Ä¢ content-marketer<br/>‚Ä¢ sales-automator<br/>‚Ä¢ customer-support<br/>‚Ä¢ search-specialist<br/>‚Ä¢ legal-advisor<br/>‚Ä¢ SEO specialists (7)"]
    
    SonnetModel --> SonnetAgents["Sonnet Agents:<br/>‚Ä¢ All language specialists (18)<br/>‚Ä¢ Development & architecture (5)<br/>‚Ä¢ Infrastructure & ops (9)<br/>‚Ä¢ Quality & testing (5)<br/>‚Ä¢ Specialized domains (3)<br/>‚Ä¢ Documentation (1)<br/>‚Ä¢ Business (1)<br/>‚Ä¢ SEO content (2)"]
    
    OpusModel --> OpusAgents["Opus Agents:<br/>‚Ä¢ ai-engineer<br/>‚Ä¢ security-auditor<br/>‚Ä¢ performance-engineer<br/>‚Ä¢ incident-responder<br/>‚Ä¢ mlops-engineer<br/>‚Ä¢ architect-reviewer<br/>‚Ä¢ cloud-architect<br/>‚Ä¢ prompt-engineer<br/>‚Ä¢ context-manager<br/>‚Ä¢ quant-analyst<br/>‚Ä¢ risk-manager<br/>‚Ä¢ docs-architect<br/>‚Ä¢ tutorial-engineer"]
    
    %% Decision Factors
    subgraph DecisionFactors ["üéØ Key Decision Factors"]
        Factor1["üí∞ Cost Sensitivity<br/>Haiku = Lowest<br/>Sonnet = Medium<br/>Opus = Highest"]
        Factor2["‚è∞ Time Constraints<br/>Haiku = Fastest<br/>Sonnet = Balanced<br/>Opus = Thorough"]
        Factor3["üéØ Accuracy Requirements<br/>Haiku = Good<br/>Sonnet = High<br/>Opus = Maximum"]
        Factor4["üîß Task Complexity<br/>Haiku = Simple<br/>Sonnet = Moderate<br/>Opus = Complex"]
        Factor5["‚ö†Ô∏è Risk Level<br/>Haiku = Low Risk<br/>Sonnet = Medium Risk<br/>Opus = High Risk"]
    end
    
    %% Use Case Examples
    subgraph UseCases ["üìã Common Use Cases by Model"]
        direction TB
        
        HaikuUses["‚ö° Haiku Use Cases:<br/>‚Ä¢ SQL data queries<br/>‚Ä¢ API documentation<br/>‚Ä¢ Content writing<br/>‚Ä¢ SEO optimization<br/>‚Ä¢ Customer support<br/>‚Ä¢ Business metrics<br/>‚Ä¢ Quick research"]
        
        SonnetUses["‚öñÔ∏è Sonnet Use Cases:<br/>‚Ä¢ Application development<br/>‚Ä¢ Code reviews<br/>‚Ä¢ System design<br/>‚Ä¢ Infrastructure setup<br/>‚Ä¢ Testing automation<br/>‚Ä¢ Database optimization<br/>‚Ä¢ DevOps tasks"]
        
        OpusUses["üß† Opus Use Cases:<br/>‚Ä¢ AI/ML development<br/>‚Ä¢ Security audits<br/>‚Ä¢ Performance tuning<br/>‚Ä¢ Crisis response<br/>‚Ä¢ Financial modeling<br/>‚Ä¢ Architecture decisions<br/>‚Ä¢ Complex integrations"]
    end
    
    %% Escalation Path
    HaikuModel -.->|"If task proves<br/>more complex"| SonnetModel
    SonnetModel -.->|"If requires<br/>expert insight"| OpusModel
    
    %% Styling
    classDef haiku fill:#e1f5fe,stroke:#0277bd,stroke-width:3px
    classDef sonnet fill:#f3e5f5,stroke:#7b1fa2,stroke-width:3px
    classDef opus fill:#fff3e0,stroke:#f57c00,stroke-width:3px
    classDef decision fill:#f0f4c3,stroke:#827717,stroke-width:2px
    classDef task fill:#e8eaf6,stroke:#3f51b5,stroke-width:2px
    classDef factor fill:#fce4ec,stroke:#e91e63,stroke-width:2px
    classDef usecase fill:#e0f2f1,stroke:#00695c,stroke-width:2px
    
    class HaikuModel,HaikuAgents,HaikuUses haiku
    class SonnetModel,SonnetAgents,SonnetUses sonnet
    class OpusModel,OpusAgents,OpusUses opus
    class Complexity,HaikuCriteria,ModerateCheck decision
    class Start,Simple,Moderate,Complex task
    class Factor1,Factor2,Factor3,Factor4,Factor5 factor
    class DecisionFactors,UseCases usecase