---
title: Claude Code Agent Interaction Flow - Common Workflows
---
graph TD
    %% Development Pipeline Workflow
    subgraph DevPipeline ["🔄 Development Pipeline Workflow"]
        direction TB
        
        Requirements["📋 Requirements<br/>Analysis"]
        Requirements --> BackendArch["backend-architect<br/>(Sonnet)"]
        Requirements --> FrontendDev["frontend-developer<br/>(Sonnet)"]
        Requirements --> UIUX["ui-ux-designer<br/>(Sonnet)"]
        
        BackendArch --> PythonPro["python-pro<br/>(Sonnet)"]
        BackendArch --> JavaPro["java-pro<br/>(Sonnet)"]
        BackendArch --> SQLPro["sql-pro<br/>(Sonnet)"]
        
        FrontendDev --> JSPro["javascript-pro<br/>(Sonnet)"]
        FrontendDev --> TSPro["typescript-pro<br/>(Sonnet)"]
        
        PythonPro --> CodeReviewer["code-reviewer<br/>(Sonnet)"]
        JavaPro --> CodeReviewer
        JSPro --> CodeReviewer
        TSPro --> CodeReviewer
        
        CodeReviewer --> TestAuto["test-automator<br/>(Sonnet)"]
        TestAuto --> DeployEng["deployment-engineer<br/>(Sonnet)"]
        
        DeployEng --> ArchReviewer["architect-reviewer<br/>(Opus)"]
    end
    
    %% Incident Response Workflow
    subgraph IncidentFlow ["🚨 Incident Response Workflow"]
        direction TB
        
        Alert["🔔 Production Alert"]
        Alert --> IncidentResp["incident-responder<br/>(Opus)"]
        
        IncidentResp --> DevOpsTrouble["devops-troubleshooter<br/>(Sonnet)"]
        IncidentResp --> ErrorDetective["error-detective<br/>(Sonnet)"]
        IncidentResp --> PerfEng["performance-engineer<br/>(Opus)"]
        
        DevOpsTrouble --> NetEng["network-engineer<br/>(Sonnet)"]
        ErrorDetective --> Debugger["debugger<br/>(Sonnet)"]
        PerfEng --> DBOptim["database-optimizer<br/>(Sonnet)"]
        
        NetEng --> Resolution["✅ Resolution"]
        Debugger --> Resolution
        DBOptim --> Resolution
        
        Resolution --> DocsArch["docs-architect<br/>(Opus)"]
    end
    
    %% AI/ML Development Workflow
    subgraph MLFlow ["🤖 AI/ML Development Workflow"]
        direction TB
        
        DataReq["📊 Data Requirements"]
        DataReq --> DataSci["data-scientist<br/>(Haiku)"]
        DataSci --> DataEng["data-engineer<br/>(Sonnet)"]
        
        DataEng --> MLEng["ml-engineer<br/>(Sonnet)"]
        MLEng --> AIEng["ai-engineer<br/>(Opus)"]
        
        AIEng --> PromptEng["prompt-engineer<br/>(Opus)"]
        PromptEng --> MLOpsEng["mlops-engineer<br/>(Opus)"]
        
        MLOpsEng --> SecurityAud["security-auditor<br/>(Opus)"]
        SecurityAud --> PerfEngML["performance-engineer<br/>(Opus)"]
    end
    
    %% Content & SEO Workflow
    subgraph SEOFlow ["📝 Content & SEO Workflow"]
        direction TB
        
        ContentReq["📄 Content Requirements"]
        ContentReq --> ContentMark["content-marketer<br/>(Haiku)"]
        ContentMark --> SEOContentWriter["seo-content-writer<br/>(Sonnet)"]
        
        SEOContentWriter --> SEOKeyword["seo-keyword-strategist<br/>(Haiku)"]
        SEOKeyword --> SEOStruct["seo-structure-architect<br/>(Haiku)"]
        
        SEOStruct --> SEOMeta["seo-meta-optimizer<br/>(Haiku)"]
        SEOMeta --> SEOAuditor["seo-content-auditor<br/>(Sonnet)"]
        
        SEOAuditor --> SEOAuth["seo-authority-builder<br/>(Sonnet)"]
        SEOAuth --> SEOSnippet["seo-snippet-hunter<br/>(Haiku)"]
    end
    
    %% Cloud Migration Workflow
    subgraph CloudFlow ["☁️ Cloud Migration Workflow"]
        direction TB
        
        Migration["🔄 Migration Request"]
        Migration --> CloudArch["cloud-architect<br/>(Opus)"]
        CloudArch --> TerraformSpec["terraform-specialist<br/>(Sonnet)"]
        
        TerraformSpec --> K8sArch["kubernetes-architect<br/>(Sonnet)"]
        K8sArch --> DevOpsEng["deployment-engineer<br/>(Sonnet)"]
        
        DevOpsEng --> SecurityAudCloud["security-auditor<br/>(Opus)"]
        SecurityAudCloud --> PerfEngCloud["performance-engineer<br/>(Opus)"]
        
        PerfEngCloud --> DXOpt["dx-optimizer<br/>(Sonnet)"]
        DXOpt --> LegacyMod["legacy-modernizer<br/>(Sonnet)"]
    end
    
    %% Cross-workflow connections
    ArchReviewer -.-> IncidentResp
    DocsArch -.-> TutorialEng["tutorial-engineer<br/>(Opus)"]
    ContextMgr["context-manager<br/>(Opus)"] -.-> ArchReviewer
    ContextMgr -.-> IncidentResp
    ContextMgr -.-> CloudArch
    
    %% Styling
    classDef haikuAgent fill:#e1f5fe,stroke:#0277bd,stroke-width:2px
    classDef sonnetAgent fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px
    classDef opusAgent fill:#fff3e0,stroke:#f57c00,stroke-width:2px
    classDef workflow fill:#f0f4c3,stroke:#827717,stroke-width:2px
    classDef trigger fill:#ffebee,stroke:#d32f2f,stroke-width:2px
    classDef outcome fill:#e8f5e8,stroke:#2e7d32,stroke-width:2px
    
    class Requirements,DataReq,ContentReq,Migration trigger
    class Resolution,DocsArch,TutorialEng,LegacyMod outcome
    class DevPipeline,IncidentFlow,MLFlow,SEOFlow,CloudFlow workflow